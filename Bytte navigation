procedure Navigation(counter : in out Integer; flag : in out Boolean) is
   -- Constants to define the duration of actions in terms of counter cycles
   constant RotateTime   : Integer := 60;  -- Rotate for 0.6 seconds (assuming 0.01 seconds per cycle)
   constant ReverseTime  : Integer := 20;  -- Reverse for 0.2 seconds
   constant MoveBackTime : Integer := 50;  -- Move back for 0.5 seconds

   -- State variables to track if an action is ongoing
   Action_Completed : Boolean := False;
   ThreatDetected   : Boolean := False;
   ThreatDistance   : Integer := 0;
   ThreatPosition   : String := "None";

begin
   -- Continuously check for threats
   if detectThreat(F, 15) then
      ThreatDetected := True;
      ThreatDistance := 15;
      ThreatPosition := "Front";
   elsif detectThreat(R, 15) then
      ThreatDetected := True;
      ThreatDistance := 15;
      ThreatPosition := "Right";
   elsif detectThreat(L, 15) then
      ThreatDetected := True;
      ThreatDistance := 15;
      ThreatPosition := "Left";
   elsif detectThreat(B, 15) then
      ThreatDetected := True;
      ThreatDistance := 15;
      ThreatPosition := "Back";
   else
      ThreatDetected := False;
      ThreatPosition := "None";
   end if;

   -- If a threat is detected, handle navigation based on the position
   if ThreatDetected then
      case ThreatPosition is
         when "Front" =>
            -- If threat is in front, rotate first (clockwise or counterclockwise based on need)
            if counter = 0 then
               rotateFirst := True;
               setAngle := 90;  -- Rotate clockwise by 90 degrees
               setBool := True;
               setDirection := goForward;
               setSpeed := FullSpeed;
               flag := True;
               Action_Completed := False;  -- Action not completed yet
            elsif counter < RotateTime then
               -- Continue rotating until 0.6 seconds have passed
               setDirection := goForward;
               setSpeed := FullSpeed;
               Action_Completed := False;
            else
               -- After 0.6 seconds, stop rotating
               setDirection := goForward;
               setSpeed := FullSpeed;
               Action_Completed := True;
               counter := 0;  -- Reset counter for next action
            end if;

         when "Right" =>
            -- If threat is on the right, rotate left
            if counter = 0 then
               rotateCar := False;  -- Set rotation direction
               setDirection := lateralLeft;
               setSpeed := MediumSpeed;
               setAngle := 45;  -- Rotate by 45 degrees
               flag := True;
               Action_Completed := False;
            elsif counter < RotateTime then
               -- Continue rotating until 0.6 seconds have passed
               setDirection := lateralLeft;
               setSpeed := MediumSpeed;
               Action_Completed := False;
            else
               -- After 0.6 seconds, stop rotating
               setDirection := goForward;
               setSpeed := MediumSpeed;
               Action_Completed := True;
               counter := 0;  -- Reset counter for next action
            end if;

         when "Left" =>
            -- If threat is on the left, rotate right
            if counter = 0 then
               rotateCar := True;  -- Set rotation direction
               setDirection := lateralRight;
               setSpeed := MediumSpeed;
               setAngle := 45;  -- Rotate by 45 degrees
               flag := True;
               Action_Completed := False;
            elsif counter < RotateTime then
               -- Continue rotating until 0.6 seconds have passed
               setDirection := lateralRight;
               setSpeed := MediumSpeed;
               Action_Completed := False;
            else
               -- After 0.6 seconds, stop rotating
               setDirection := goForward;
               setSpeed := MediumSpeed;
               Action_Completed := True;
               counter := 0;  -- Reset counter for next action
            end if;

         when "Back" =>
            -- If threat is in the back, move forward for 0.2 seconds
            if counter = 0 then
               setDirection := goForward;
               setSpeed := MediumSpeed;
               flag := True;
               Action_Completed := False;
            elsif counter < ReverseTime then
               -- Continue moving forward for 0.2 seconds
               setDirection := goForward;
               setSpeed := MediumSpeed;
               Action_Completed := False;
            else
               -- After 0.2 seconds, stop moving forward
               setDirection := goForward;
               setSpeed := FullSpeed;
               Action_Completed := True;
               counter := 0;  -- Reset counter for next action
            end if;

         when others =>
            -- If there is no threat, continue moving forward
            setDirection := goForward;
            setSpeed := FullSpeed;
            Action_Completed := True;
            counter := 0;  -- Reset counter to prepare for next cycle
      end case;
   else
      -- No threat detected, continue moving forward
      setDirection := goForward;
      setSpeed := FullSpeed;
      Action_Completed := True;
      counter := 0;  -- Reset counter to prepare for next cycle
   end if;

   -- Increment the counter at the end of each cycle
   if not Action_Completed then
      counter := counter + 1;  -- Increment the counter for next check
   end if;

end Navigation;
